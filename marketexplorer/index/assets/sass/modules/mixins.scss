//bourbon
@import '../../../bower_components/bourbon/app/assets/stylesheets/_bourbon.scss';

//nested pills
@mixin cat-pills() {

    $base: '.nav-secondary';
    $list: 'li' 'li li' 'li li li' 'li li li li' 'li li li li li' 'li li li li li li';
    $num: 0;

    @each $level in $list {
        $num: $num + 1;
        #{$base $level} {
            margin-left: 15px;
        }
    }
        
}

@include cat-pills();


//prefixer
@mixin box-sizing($box) {
    @include prefixer(box-sizing, $box, webkit moz spec);
}


//padding and margin
$spaceamounts: (0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50);

@mixin generate-margin-bottom() {
    @each $space in $spaceamounts {
        .mb-#{$space} {
            margin-bottom: #{$space}px;
        }
    }
}
@mixin generate-margin-right() {
    @each $space in $spaceamounts {
        .mr-#{$space} {
            margin-right: #{$space}px;
        }
    }
}
@mixin generate-margin-left() {
    @each $space in $spaceamounts {
        .ml-#{$space} {
            margin-left: #{$space}px;
        }
    }
}
@mixin generate-margin-top() {
    @each $space in $spaceamounts {
        .mt-#{$space} {
            margin-top: #{$space}px;
        }
    }
}
@mixin generate-padding-top() {
    @each $space in $spaceamounts {
        .pt-#{$space} {
            padding-top: #{$space}px;
        }
    }
}
@mixin generate-padding-bottom() {
    @each $space in $spaceamounts {
        .pb-#{$space} {
            padding-bottom: #{$space}px;
        }
    }
}
@mixin generate-padding-right() {
    @each $space in $spaceamounts {
        .pr-#{$space} {
            padding-right: #{$space}px;
        }
    }
}
@mixin generate-padding-left() {
    @each $space in $spaceamounts {
        .pl-#{$space} {
            padding-left: #{$space}px;
        }
    }
}

@include generate-margin-bottom();
@include generate-margin-right();
@include generate-margin-left();
@include generate-margin-top();
@include generate-padding-bottom();
@include generate-padding-top();
@include generate-padding-right();
@include generate-padding-left();


//breakpoints
@mixin bp-large {
    @media only screen and (max-width: 60em) {
        @content;
    }
}

@mixin bp-medium {
    @media only screen and (max-width: 40em) {
        @content;
    }
}

@mixin bp-small {
    @media only screen and (max-width: 30em) {
        @content;
    }
}

//animations
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};      
}


//transitions
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}


//clearfix
%clearfix {
    *zoom: 1;
    &:before, &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}


//positioning
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}


//media queries
@mixin screen($size) {
    $desktop: "(min-width: 1024px)";
    $tablet: "(min-width: 768px) and (max-width: 1023px)";
    $mobile: "(max-width: 767px)";
    @if $size == desktop {
        @media only screen and #{$desktop} {
            @content;
        }
    }
    @else if $size == tablet {
        @media only screen and #{$tablet} {
            @content;
        }
    }
    @else if $size == mobile {
        @media only screen and #{$mobile} {
            @content;
        }
    }
    @else {
        @media only screen and #{$size} {
            @content;
        }
    }
}


//retina images
@mixin retina($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        /* Serving 2x image on Retina display */
        background-image: url($image);
        background-size: $width $height;
    }
}


//linear gradient
@mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
        } @else if $orientation == 'horizontal' {
            background: -webkit-linear-gradient(left, $start-color, $end-color);
            background: linear-gradient(to right, $start-color, $end-color);
            } @else {
                background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
                background: radial-gradient(ellipse at center, $start-color, $end-color);
            }
        }


//font face
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf')  format('truetype'),
        url($file-name + '.svg##{$font-name}')  format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}